<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .card {
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            border: none;
            border-radius: 15px;
        }
        .todo-container {
            margin-top: 50px;
        }
        .btn-primary {
            background: linear-gradient(45deg, #667eea, #764ba2);
            border: none;
        }
        .todo-item {
            background: white;
            margin: 10px 0;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .completed {
            opacity: 0.6;
            text-decoration: line-through;
        }
        .todo-title-edit, .todo-description-edit {
            border: 2px solid #667eea;
            border-radius: 5px;
        }
        .todo-title-edit:focus, .todo-description-edit:focus {
            outline: none;
            border-color: #764ba2;
            box-shadow: 0 0 5px rgba(118, 75, 162, 0.3);
        }
        .todo-edit-btn:hover {
            background-color: #667eea;
            color: white;
        }
        .todo-save-btn:hover {
            background-color: #28a745;
            color: white;
        }
        .todo-save-container {
            text-align: left;
            padding-top: 10px;
        }
        .todo-save-container .btn {
            margin-right: 5px;
        }
    </style>
  </head>
  <body>
    <div class="container todo-container">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header bg-primary text-white text-center">
                        <h1> <%= title %></h1>
                        <p class="mb-0">Your tasks, simplified.</p>
                    </div>
                    <div class="card-body">
                        <!-- Add Todo Form -->
                        <div class="mb-4">
                            <h4><i class="fas fa-plus"></i> Add New Todo</h4>
                            <form id="todoForm">
                                <div class="row">
                                    <div class="col-md-6">
                                        <input type="text" id="todoTitle" class="form-control mb-2" placeholder="Todo title" required>
                                    </div>
                                    <div class="col-md-4">
                                        <select id="todoPriority" class="form-control mb-2">
                                            <option value="low">Low Priority</option>
                                            <option value="medium" selected>Medium Priority</option>
                                            <option value="high">High Priority</option>
                                        </select>
                                    </div>
                                    <div class="col-md-2">
                                        <button type="submit" class="btn btn-primary w-100">
                                            <i class="fas fa-plus"></i> Add
                                        </button>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-8">
                                        <textarea id="todoDescription" class="form-control mb-2" placeholder="Description (optional)" rows="2"></textarea>
                                    </div>
                                    <div class="col-md-4">
                                        <input type="date" id="todoDueDate" class="form-control mb-2">
                                    </div>
                                </div>
                            </form>
                        </div>

                        <!-- Todo List -->
                        <div class="mb-4">
                            <h4><i class="fas fa-list"></i> Your Todos</h4>
                            <div id="todoList">
                                <!-- Todos will be loaded here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Simple JavaScript for todo management
        document.addEventListener('DOMContentLoaded', function() {
            loadTodos();

            document.getElementById('todoForm').addEventListener('submit', function(e) {
                e.preventDefault();
                addTodo();
            });
        });

        function loadTodos() {
            fetch('/api/todos')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displayTodos(data.data);
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function displayTodos(todos) {
            const todoList = document.getElementById('todoList');
            todoList.innerHTML = '';

            if (todos.length === 0) {
                todoList.innerHTML = '<p class="text-muted">No todos yet. Add one above!</p>';
                return;
            }

            todos.forEach(todo => {
                const todoItem = document.createElement('div');
                todoItem.className = `todo-item ${todo.completed ? 'completed' : ''}`;
                todoItem.innerHTML = `
                    <div>
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <div class="todo-title-container">
                                    <h6 class="todo-title mb-1" id="title-${todo._id}">${todo.title} 
                                        <span class="badge bg-${getPriorityColor(todo.priority)}">${todo.priority}</span>
                                    </h6>
                                    <input type="text" class="form-control todo-title-edit mb-2" id="title-edit-${todo._id}" value="${todo.title}" style="display: none;">
                                </div>
                                <div class="todo-description-container">
                                    ${todo.description ? `<p class="todo-description mb-1 text-muted" id="description-${todo._id}">${todo.description}</p>` : `<p class="todo-description mb-1 text-muted" id="description-${todo._id}" style="display: none;"></p>`}
                                    <textarea class="form-control todo-description-edit mb-2" id="description-edit-${todo._id}" rows="2" style="display: none;" placeholder="Enter description (optional)">${todo.description || ''}</textarea>
                                </div>
                                ${todo.dueDate ? `<small class="text-muted"><i class="fas fa-calendar"></i> ${new Date(todo.dueDate).toLocaleDateString()}</small>` : ''}
                            </div>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-outline-primary todo-edit-btn" id="edit-btn-${todo._id}" onclick="editTodo('${todo._id}')">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-success" onclick="toggleTodo('${todo._id}')">
                                    <i class="fas fa-${todo.completed ? 'undo' : 'check'}"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" onclick="deleteTodo('${todo._id}')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                        <div class="todo-save-container mt-2" id="save-container-${todo._id}" style="display: none;">
                            <button class="btn btn-success todo-save-btn" id="save-btn-${todo._id}" onclick="saveTodo('${todo._id}')">
                                Save
                            </button>
                            <button class="btn btn-secondary ms-2" onclick="cancelEdit('${todo._id}')">
                                Cancel
                            </button>
                        </div>
                    </div>
                `;
                todoList.appendChild(todoItem);
            });
        }

        function getPriorityColor(priority) {
            switch(priority) {
                case 'high': return 'danger';
                case 'medium': return 'warning';
                case 'low': return 'secondary';
                default: return 'secondary';
            }
        }

        function addTodo() {
            const title = document.getElementById('todoTitle').value;
            const description = document.getElementById('todoDescription').value;
            const priority = document.getElementById('todoPriority').value;
            const dueDate = document.getElementById('todoDueDate').value;

            const todoData = {
                title,
                description,
                priority,
                ...(dueDate && { dueDate })
            };

            fetch('/api/todos', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(todoData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('todoForm').reset();
                    loadTodos();
                } else {
                    alert('Error adding todo: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error adding todo');
            });
        }

        function toggleTodo(id) {
            fetch(`/api/todos/${id}/toggle`, {
                method: 'PATCH'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadTodos();
                }
            })
            .catch(error => console.error('Error:', error));
        }

        function deleteTodo(id) {
            if (confirm('Are you sure you want to delete this todo?')) {
                fetch(`/api/todos/${id}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        loadTodos();
                    }
                })
                .catch(error => console.error('Error:', error));
            }
        }

        function editTodo(id) {
            const titleElement = document.getElementById(`title-${id}`);
            const descriptionElement = document.getElementById(`description-${id}`);
            const titleEdit = document.getElementById(`title-edit-${id}`);
            const descriptionEdit = document.getElementById(`description-edit-${id}`);
            const editBtn = document.getElementById(`edit-btn-${id}`);
            const saveContainer = document.getElementById(`save-container-${id}`);

            // Hide display elements
            titleElement.style.display = 'none';
            descriptionElement.style.display = 'none';
            
            // Show edit elements
            titleEdit.style.display = 'block';
            descriptionEdit.style.display = 'block';
            
            // Toggle buttons
            editBtn.style.display = 'none';
            saveContainer.style.display = 'block';
            
            // Focus on title input
            titleEdit.focus();
        }

                function saveTodo(id) {
            const title = document.getElementById(`title-edit-${id}`).value.trim();
            const description = document.getElementById(`description-edit-${id}`).value.trim();

            if (!title) {
                alert('Title cannot be empty');
                return;
            }

            const todoData = {
                title,
                description
            };

            fetch(`/api/todos/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(todoData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadTodos();
                } else {
                    alert('Error updating todo: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error updating todo');
            });
        }

        function cancelEdit(id) {
            const titleElement = document.getElementById(`title-${id}`);
            const descriptionElement = document.getElementById(`description-${id}`);
            const titleEdit = document.getElementById(`title-edit-${id}`);
            const descriptionEdit = document.getElementById(`description-edit-${id}`);
            const editBtn = document.getElementById(`edit-btn-${id}`);
            const saveContainer = document.getElementById(`save-container-${id}`);

            // Show display elements
            titleElement.style.display = 'block';
            descriptionElement.style.display = 'block';
            
            // Hide edit elements
            titleEdit.style.display = 'none';
            descriptionEdit.style.display = 'none';
            
            // Toggle buttons
            editBtn.style.display = 'inline-block';
            saveContainer.style.display = 'none';
            
            // Reset form values to original
            loadTodos(); // This will refresh the display with original values
        }
    </script>
  </body>
</html>
